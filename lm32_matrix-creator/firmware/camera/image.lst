
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000560  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000010  00000560  00000560  000005b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000000c  00000570  00000570  000005c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000128  0000057c  0000057c  000005d0  2**2
                  ALLOC
  4 .debug_abbrev 0000026c  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000638  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000407  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000198  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000071  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000251  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY
 13 .debug_loc    00000177  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 88 	calli 2ec <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 3f fc 	ori sp,sp,0x3ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 05 80 	ori gp,gp,0x580
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 7c 	ori r1,r1,0x57c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 a4 	ori r3,r3,0x6a4

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
char UartBuffer[UART_COMMANDS_BUFFER_SIZE];
uint32_t UartBufferPtr = 0;



int main(void){
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
    
    // Init Commands
    irq_set_mask( 0x00000012 );
 210:	34 01 00 12 	mvi r1,18
 214:	fb ff ff d1 	calli 158 <irq_set_mask>
    isr_init();
 218:	f8 00 00 4e 	calli 350 <isr_init>
   // keypad_init();
    camera_init();
 21c:	f8 00 00 ba 	calli 504 <camera_init>
    tic_init();
 220:	f8 00 00 7c 	calli 410 <tic_init>
    irq_enable();
 224:	fb ff ff c7 	calli 140 <irq_enable>
    uart_init();
 228:	f8 00 00 8d 	calli 45c <uart_init>
    mSleep(100);
 22c:	34 01 00 64 	mvi r1,100
 230:	f8 00 00 5f 	calli 3ac <mSleep>
    //char b[50];
    while (1){
	camera_init();
 234:	f8 00 00 b4 	calli 504 <camera_init>
 238:	f8 00 00 b3 	calli 504 <camera_init>
 23c:	e3 ff ff fe 	bi 234 <main+0x2c>

00000240 <isr_null>:
    return b;
}

void isr_null(void)
{
}
 240:	c3 a0 00 00 	ret

00000244 <tic_isr>:
     } while ( ! (tcr & TIMER_TRIG) );
}

void tic_isr(void)
{
    tic_msec++;
 244:	78 01 00 00 	mvhi r1,0x0
 248:	38 21 06 a0 	ori r1,r1,0x6a0
 24c:	28 23 00 00 	lw r3,(r1+0)
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 250:	78 02 00 00 	mvhi r2,0x0
 254:	38 42 05 74 	ori r2,r2,0x574
 258:	28 42 00 00 	lw r2,(r2+0)
     } while ( ! (tcr & TIMER_TRIG) );
}

void tic_isr(void)
{
    tic_msec++;
 25c:	34 63 00 01 	addi r3,r3,1
 260:	58 23 00 00 	sw (r1+0),r3
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 264:	34 01 00 0e 	mvi r1,14
 268:	58 41 00 00 	sw (r2+0),r1

//	uart_putchar(count+48);
    
//    uart_putchar(tic_msec+40);

}
 26c:	c3 a0 00 00 	ret

00000270 <itoa>:
 */


uint32_t count;

char* itoa(uint32_t i, char b[]){
 270:	37 9c ff f4 	addi sp,sp,-12
    char const digit[] = "0123456789";
 274:	78 04 00 00 	mvhi r4,0x0
 278:	38 84 05 60 	ori r4,r4,0x560
 27c:	28 83 00 00 	lw r3,(r4+0)
 280:	78 04 00 00 	mvhi r4,0x0
 284:	38 84 05 64 	ori r4,r4,0x564
 288:	5b 83 00 04 	sw (sp+4),r3
 28c:	28 83 00 00 	lw r3,(r4+0)
 290:	33 80 00 0e 	sb (sp+14),r0
    char* p = b;
    if(i<0){
        *p++ = '-';
        i *= -1;
    }
    uint32_t shifter = i;
 294:	b8 20 20 00 	mv r4,r1


uint32_t count;

char* itoa(uint32_t i, char b[]){
    char const digit[] = "0123456789";
 298:	5b 83 00 08 	sw (sp+8),r3
 29c:	34 03 38 39 	mvi r3,14393
 2a0:	0f 83 00 0c 	sh (sp+12),r3
        i *= -1;
    }
    uint32_t shifter = i;
    do{ //Move to where representation ends
        ++p;
        shifter = shifter/10;
 2a4:	34 05 00 0a 	mvi r5,10

uint32_t count;

char* itoa(uint32_t i, char b[]){
    char const digit[] = "0123456789";
    char* p = b;
 2a8:	b8 40 18 00 	mv r3,r2
        i *= -1;
    }
    uint32_t shifter = i;
    do{ //Move to where representation ends
        ++p;
        shifter = shifter/10;
 2ac:	8c 85 20 00 	divu r4,r4,r5
        *p++ = '-';
        i *= -1;
    }
    uint32_t shifter = i;
    do{ //Move to where representation ends
        ++p;
 2b0:	34 63 00 01 	addi r3,r3,1
        shifter = shifter/10;
    }while(shifter);
 2b4:	5c 80 ff fe 	bne r4,r0,2ac <itoa+0x3c>
    *p = '\0';
 2b8:	30 60 00 00 	sb (r3+0),r0
 2bc:	37 86 00 04 	addi r6,sp,4
    do{ //Move back, inserting digits as u go
        *--p = digit[i%10];
 2c0:	34 05 00 0a 	mvi r5,10
 2c4:	c4 25 20 00 	modu r4,r1,r5
 2c8:	34 63 ff ff 	addi r3,r3,-1
 2cc:	b4 c4 20 00 	add r4,r6,r4
 2d0:	40 84 00 00 	lbu r4,(r4+0)
        i = i/10;
 2d4:	8c 25 08 00 	divu r1,r1,r5
        ++p;
        shifter = shifter/10;
    }while(shifter);
    *p = '\0';
    do{ //Move back, inserting digits as u go
        *--p = digit[i%10];
 2d8:	30 64 00 00 	sb (r3+0),r4
        i = i/10;
    }while(i);
 2dc:	5c 20 ff fa 	bne r1,r0,2c4 <itoa+0x54>
    return b;
}
 2e0:	b8 40 08 00 	mv r1,r2
 2e4:	37 9c 00 0c 	addi sp,sp,12
 2e8:	c3 a0 00 00 	ret

000002ec <irq_handler>:
void isr_null(void)
{
}

void irq_handler(uint32_t pending)
{     
 2ec:	37 9c ff f0 	addi sp,sp,-16
 2f0:	5b 8b 00 10 	sw (sp+16),r11
 2f4:	5b 8c 00 0c 	sw (sp+12),r12
 2f8:	5b 8d 00 08 	sw (sp+8),r13
 2fc:	5b 9d 00 04 	sw (sp+4),ra
 300:	78 0b 00 00 	mvhi r11,0x0
 304:	39 6b 06 1c 	ori r11,r11,0x61c
 308:	b8 20 60 00 	mv r12,r1

void isr_null(void)
{
}

void irq_handler(uint32_t pending)
 30c:	35 6d 00 80 	addi r13,r11,128
 310:	e0 00 00 04 	bi 320 <irq_handler+0x34>
{     
    uint32_t i;
    for(i=0; i<32; i++) {
        if (pending & 0x00000001){
            (*isr_table[i])();
 314:	35 6b 00 04 	addi r11,r11,4
}

void irq_handler(uint32_t pending)
{     
    uint32_t i;
    for(i=0; i<32; i++) {
 318:	45 6d 00 08 	be r11,r13,338 <irq_handler+0x4c>
        if (pending & 0x00000001){
            (*isr_table[i])();
        }
        pending >>= 1;
 31c:	01 8c 00 01 	srui r12,r12,1

void irq_handler(uint32_t pending)
{     
    uint32_t i;
    for(i=0; i<32; i++) {
        if (pending & 0x00000001){
 320:	21 81 00 01 	andi r1,r12,0x1
 324:	44 20 ff fc 	be r1,r0,314 <irq_handler+0x28>
            (*isr_table[i])();
 328:	29 61 00 00 	lw r1,(r11+0)
 32c:	35 6b 00 04 	addi r11,r11,4
 330:	d8 20 00 00 	call r1
}

void irq_handler(uint32_t pending)
{     
    uint32_t i;
    for(i=0; i<32; i++) {
 334:	5d 6d ff fa 	bne r11,r13,31c <irq_handler+0x30>
        if (pending & 0x00000001){
            (*isr_table[i])();
        }
        pending >>= 1;
    }
}
 338:	2b 9d 00 04 	lw ra,(sp+4)
 33c:	2b 8b 00 10 	lw r11,(sp+16)
 340:	2b 8c 00 0c 	lw r12,(sp+12)
 344:	2b 8d 00 08 	lw r13,(sp+8)
 348:	37 9c 00 10 	addi sp,sp,16
 34c:	c3 a0 00 00 	ret

00000350 <isr_init>:

void isr_init(void)
{
 350:	78 01 00 00 	mvhi r1,0x0
 354:	38 21 06 1c 	ori r1,r1,0x61c
 358:	78 02 00 00 	mvhi r2,0x0
        }
        pending >>= 1;
    }
}

void isr_init(void)
 35c:	34 23 00 80 	addi r3,r1,128
 360:	38 42 02 40 	ori r2,r2,0x240
{
    int i;
    for(i=0; i<32; i++)
        isr_table[i] = &isr_null;
 364:	58 22 00 00 	sw (r1+0),r2
 368:	34 21 00 04 	addi r1,r1,4
}

void isr_init(void)
{
    int i;
    for(i=0; i<32; i++)
 36c:	5c 23 ff fe 	bne r1,r3,364 <isr_init+0x14>
        isr_table[i] = &isr_null;
}
 370:	c3 a0 00 00 	ret

00000374 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
 374:	78 03 00 00 	mvhi r3,0x0
 378:	3c 21 00 02 	sli r1,r1,2
 37c:	38 63 06 1c 	ori r3,r3,0x61c
 380:	b4 61 18 00 	add r3,r3,r1
 384:	58 62 00 00 	sw (r3+0),r2
}
 388:	c3 a0 00 00 	ret

0000038c <isr_unregister>:

void isr_unregister(int irq)
{
    isr_table[irq] = &isr_null;
 38c:	78 03 00 00 	mvhi r3,0x0
 390:	3c 21 00 02 	sli r1,r1,2
 394:	38 63 06 1c 	ori r3,r3,0x61c
 398:	78 02 00 00 	mvhi r2,0x0
 39c:	b4 61 18 00 	add r3,r3,r1
 3a0:	38 42 02 40 	ori r2,r2,0x240
 3a4:	58 62 00 00 	sw (r3+0),r2
}
 3a8:	c3 a0 00 00 	ret

000003ac <mSleep>:
void mSleep(uint32_t msec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000)*msec;
 3ac:	78 02 00 00 	mvhi r2,0x0
 3b0:	38 42 05 74 	ori r2,r2,0x574
 3b4:	38 03 c3 50 	mvu r3,0xc350
 3b8:	28 42 00 00 	lw r2,(r2+0)
 3bc:	88 23 08 00 	mul r1,r1,r3
 3c0:	58 41 00 10 	sw (r2+16),r1
    timer0->counter1 = 0;
 3c4:	58 40 00 14 	sw (r2+20),r0
    timer0->tcr1 = TIMER_EN;
 3c8:	34 01 00 08 	mvi r1,8
 3cc:	58 41 00 0c 	sw (r2+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
 3d0:	28 41 00 0c 	lw r1,(r2+12)
     } while ( ! (tcr & TIMER_TRIG) );
 3d4:	20 21 00 01 	andi r1,r1,0x1
 3d8:	44 20 ff fe 	be r1,r0,3d0 <mSleep+0x24>
}
 3dc:	c3 a0 00 00 	ret

000003e0 <uSleep>:
void uSleep(uint32_t usec)
{
    uint32_t tcr;

    // Use timer0.1
    timer0->compare1 = (FCPU/1000000)*usec;
 3e0:	78 02 00 00 	mvhi r2,0x0
 3e4:	38 42 05 74 	ori r2,r2,0x574
 3e8:	28 42 00 00 	lw r2,(r2+0)
 3ec:	08 21 00 32 	muli r1,r1,50
 3f0:	58 41 00 10 	sw (r2+16),r1
    timer0->counter1 = 0;
 3f4:	58 40 00 14 	sw (r2+20),r0
    timer0->tcr1 = TIMER_EN;
 3f8:	34 01 00 08 	mvi r1,8
 3fc:	58 41 00 0c 	sw (r2+12),r1

    do {
        //halt();
         tcr = timer0->tcr1;
 400:	28 41 00 0c 	lw r1,(r2+12)
     } while ( ! (tcr & TIMER_TRIG) );
 404:	20 21 00 01 	andi r1,r1,0x1
 408:	44 20 ff fe 	be r1,r0,400 <uSleep+0x20>
}
 40c:	c3 a0 00 00 	ret

00000410 <tic_init>:
void tic_init(void)//registro de la interrupcion /reset and start timer
{
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU);
 410:	78 01 00 00 	mvhi r1,0x0
 414:	78 04 00 00 	mvhi r4,0x0
 418:	38 21 05 74 	ori r1,r1,0x574
 41c:	38 84 05 68 	ori r4,r4,0x568
 420:	28 23 00 00 	lw r3,(r1+0)
 424:	28 82 00 00 	lw r2,(r4+0)

}

void tic_init(void)//registro de la interrupcion /reset and start timer
{
    tic_msec = 0;
 428:	78 01 00 00 	mvhi r1,0x0
 42c:	38 21 06 a0 	ori r1,r1,0x6a0

    // Setup timer0.0
    timer0->compare0 = (FCPU);
 430:	58 62 00 04 	sw (r3+4),r2
    timer0->counter0 = 0;
 434:	58 60 00 08 	sw (r3+8),r0

}

void tic_init(void)//registro de la interrupcion /reset and start timer
{
    tic_msec = 0;
 438:	58 20 00 00 	sw (r1+0),r0
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
 43c:	78 02 00 00 	mvhi r2,0x0
 440:	78 01 00 00 	mvhi r1,0x0
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 444:	34 04 00 0e 	mvi r4,14
 448:	58 64 00 00 	sw (r3+0),r4
        isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
    isr_table[irq] = isr;
 44c:	38 21 06 1c 	ori r1,r1,0x61c
 450:	38 42 02 44 	ori r2,r2,0x244
 454:	58 22 00 04 	sw (r1+4),r2
    timer0->compare0 = (FCPU);
    timer0->counter0 = 0;
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

    isr_register(1, &tic_isr);
}
 458:	c3 a0 00 00 	ret

0000045c <uart_init>:
    //uart0->lcr = 0x03;  // Line Control Register:    8N1
    //uart0->mcr = 0x00;  // Modem Control Register

    // Setup Divisor register (Fclk / Baud)
    //uart0->div = (FCPU/(57600*16));
}
 45c:	c3 a0 00 00 	ret

00000460 <uart_getchar>:

char uart_getchar(void)
{   
 460:	78 01 00 00 	mvhi r1,0x0
 464:	38 21 05 70 	ori r1,r1,0x570
 468:	28 22 00 00 	lw r2,(r1+0)
    while (! (uart0->ucr & UART_DR)) ;
 46c:	28 41 00 00 	lw r1,(r2+0)
 470:	20 21 00 01 	andi r1,r1,0x1
 474:	44 20 ff fe 	be r1,r0,46c <uart_getchar+0xc>
    return uart0->rxtx;
 478:	28 41 00 04 	lw r1,(r2+4)
}
 47c:	20 21 00 ff 	andi r1,r1,0xff
 480:	c3 a0 00 00 	ret

00000484 <uart_putchar>:

void uart_putchar(char c)
{
 484:	78 02 00 00 	mvhi r2,0x0
 488:	38 42 05 70 	ori r2,r2,0x570
 48c:	28 43 00 00 	lw r3,(r2+0)
 490:	20 21 00 ff 	andi r1,r1,0xff
    while (uart0->ucr & UART_BUSY) ;
 494:	28 62 00 00 	lw r2,(r3+0)
 498:	20 42 00 10 	andi r2,r2,0x10
 49c:	5c 40 ff fe 	bne r2,r0,494 <uart_putchar+0x10>
    uart0->rxtx = c;
 4a0:	58 61 00 04 	sw (r3+4),r1
}
 4a4:	c3 a0 00 00 	ret

000004a8 <uart_putstr>:

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
 4a8:	40 24 00 00 	lbu r4,(r1+0)
 4ac:	44 80 00 0b 	be r4,r0,4d8 <uart_putstr+0x30>
 4b0:	78 02 00 00 	mvhi r2,0x0
 4b4:	38 42 05 70 	ori r2,r2,0x570
 4b8:	28 43 00 00 	lw r3,(r2+0)
    return uart0->rxtx;
}

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
 4bc:	28 62 00 00 	lw r2,(r3+0)
 4c0:	20 42 00 10 	andi r2,r2,0x10
 4c4:	5c 40 ff fe 	bne r2,r0,4bc <uart_putstr+0x14>
    uart0->rxtx = c;
 4c8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
        uart_putchar(*c);
        c++;
 4cc:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
 4d0:	40 24 00 00 	lbu r4,(r1+0)
 4d4:	5c 82 ff fa 	bne r4,r2,4bc <uart_putstr+0x14>
 4d8:	c3 a0 00 00 	ret

000004dc <camera_data>:

//Camera

uint32_t camera_data(void)
{
	return (camera0->dataOut);
 4dc:	78 01 00 00 	mvhi r1,0x0
 4e0:	38 21 05 78 	ori r1,r1,0x578
 4e4:	28 21 00 00 	lw r1,(r1+0)
 4e8:	28 21 00 04 	lw r1,(r1+4)
}
 4ec:	c3 a0 00 00 	ret

000004f0 <camera_finish>:


uint32_t camera_finish(void)
{
	return camera0->ready;
 4f0:	78 01 00 00 	mvhi r1,0x0
 4f4:	38 21 05 78 	ori r1,r1,0x578
 4f8:	28 21 00 00 	lw r1,(r1+0)
 4fc:	28 21 00 00 	lw r1,(r1+0)
}
 500:	c3 a0 00 00 	ret

00000504 <camera_init>:

int i;
char b[50];
void camera_init(void){
 504:	78 02 00 00 	mvhi r2,0x0
 508:	78 01 00 00 	mvhi r1,0x0
 50c:	38 42 05 78 	ori r2,r2,0x578
 510:	38 21 05 70 	ori r1,r1,0x570
 514:	28 44 00 00 	lw r4,(r2+0)
 518:	28 22 00 00 	lw r2,(r1+0)
	//if (camera_finish()){	
		for (i=0;i<320*240;i++){			
 51c:	78 01 00 00 	mvhi r1,0x0
 520:	38 21 05 6c 	ori r1,r1,0x56c
 524:	28 26 00 00 	lw r6,(r1+0)
	return camera0->ready;
}

int i;
char b[50];
void camera_init(void){
 528:	34 03 00 00 	mvi r3,0
	//if (camera_finish()){	
		for (i=0;i<320*240;i++){			
			camera0->add_rd =i;
 52c:	58 83 00 08 	sw (r4+8),r3
			uart_putchar(camera0->dataOut);
 530:	28 85 00 04 	lw r5,(r4+4)
 534:	20 a5 00 ff 	andi r5,r5,0xff
    return uart0->rxtx;
}

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
 538:	28 41 00 00 	lw r1,(r2+0)
 53c:	20 21 00 10 	andi r1,r1,0x10
 540:	5c 20 ff fe 	bne r1,r0,538 <camera_init+0x34>
    uart0->rxtx = c;
 544:	58 45 00 04 	sw (r2+4),r5
 548:	34 63 00 01 	addi r3,r3,1

int i;
char b[50];
void camera_init(void){
	//if (camera_finish()){	
		for (i=0;i<320*240;i++){			
 54c:	5c 66 ff f8 	bne r3,r6,52c <camera_init+0x28>
 550:	78 01 00 00 	mvhi r1,0x0
 554:	38 21 06 18 	ori r1,r1,0x618
 558:	58 23 00 00 	sw (r1+0),r3
			camera0->add_rd =i;
			uart_putchar(camera0->dataOut);
			}
	//}
}
 55c:	c3 a0 00 00 	ret
